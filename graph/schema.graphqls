# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type League {
  id: Int!
  name: String!
  country: String!
  tier: Int!
}

type Team {
  id: Int!
  league: League!
  name: String!
  foundingYear: Int!
  #Roster: [Player!]!
}

type Player {
  id: Int!
  firstName: String!
  lastName: String!
  #dateOfBirth: Need to figure this out
  height: Float!
  nationality: String!
  position: String!
  team: Team!
  number: Int!
  foot: String!
}

type Season {
  id: Int!
  league: League!
  startYear: Int!
  endYear: Int!
}

type Match {
  id: Int!
  season: Season!
  homeTeam: Team!
  awayTeam: Team!
  matchDay: Int!
  #matchDate: <some date type i need to figure out>
  matchEvents: [MatchEvent!]
  matchStats: MatchStats
}

type MatchEvent {
  id: Int!
  match: Match!
  team: Team!
  player: Player!
  eventType: Int! #Will correspond to an enum
  eventMinute: Int!
  stoppageTime: Int
}

type MatchStats {
  id: Int!
  Match: Match!
  possessionHome: Int!
  totalShotsHome: Int!
  shotsOnTargetHome: Int!
  savesHome: Int!
  cornersHome: Int!
  foulsHome: Int!
  offsidesHome: Int!
  possessionAway: Int!
  totalShotsAway: Int!
  shotsOnTargetAway: Int!
  savesAway: Int!
  cornersAway: Int!
  foulsAway: Int!
  offsidesAway: Int!
}

type Query {
  leagues: [League!]!
  teams: [Team!]!
  players: [Player!]!
  seasons: [Season!]!
  matches: [Match!]!
  #Need get by ID's
  matchesBySeasonId(seasonId: Int!): [Match!]!
  matchEventsByMatchId(matchId: Int!): [MatchEvent!]
  matchStatsByMatchId(matchId: Int!): MatchStats!
}

type DeleteResponse {
  message: String!
}

input NewLeague {
  name: String!
  country: String!
  tier: Int!
}

input NewTeam {
  name: String!
  leagueId: Int!
  foundingYear: Int!
}

input NewPlayer {
  firstName: String!
  lastName: String!
  height: Float!
  nationality: String!
  position: String!
  teamId: Int!
  number: Int!
  foot: String!
}

input UpdatedLeague {
  id: Int!
  name: String
  country: String
  tier: Int
}

input UpdatedTeam {
  id: Int!
  leagueId: Int
  name: String
  foundingYear: Int
}

input UpdatedPlayer {
  id: Int!
  firstName: String
  lastName: String
  height: Float
  nationality: String
  position: String
  teamId: Int
  number: Int
  foot: String
}

#TODO: Mutations for seasons, matches, match events, match stats
type Mutation {
  createLeague(input: NewLeague!): League!
  createTeam(input: NewTeam!): Team!
  createPlayer(input: NewPlayer!): Player!
  updateLeague(input: UpdatedLeague!): League!
  updateTeam(input: UpdatedTeam!): Team!
  updatePlayer(input: UpdatedPlayer!): Player!
  deleteLeague(id: Int!): DeleteResponse!
  deleteTeam(id: Int!): DeleteResponse!
  deletePlayer(id: Int!): DeleteResponse!
}