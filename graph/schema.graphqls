# GraphQL schema example
#
# https://gqlgen.com/getting-started/

#League Types/Inputs
type League {
  id: Int!
  name: String!
  country: String!
  tier: Int!
}

input NewLeague {
  name: String!
  country: String!
  tier: Int!
}

input UpdatedLeague {
  id: Int!
  name: String
  country: String
  tier: Int
}

#Team Types/Inputs
type Team {
  id: Int!
  league: League!
  name: String!
  foundingYear: Int!
  #Roster: [Player!]!
}

input NewTeam {
  name: String!
  leagueId: Int!
  foundingYear: Int!
}

input UpdatedTeam {
  id: Int!
  leagueId: Int
  name: String
  foundingYear: Int
}

#Player Types/Inputs
type Player {
  id: Int!
  firstName: String!
  lastName: String!
  #dateOfBirth: Need to figure this out
  height: Float!
  nationality: String!
  position: String!
  team: Team!
  number: Int!
  foot: String!
}

input NewPlayer {
  firstName: String!
  lastName: String!
  height: Float!
  nationality: String!
  position: String!
  teamId: Int!
  number: Int!
  foot: String!
}

input UpdatedPlayer {
  id: Int!
  firstName: String
  lastName: String
  height: Float
  nationality: String
  position: String
  teamId: Int
  number: Int
  foot: String
}

#Season Types/Inputs
type Season {
  id: Int!
  league: League!
  startYear: Int!
  endYear: Int!
}

input NewSeason {
  leagueId: Int!
  startYear: Int!
  endYear: Int!
}

input UpdatedSeason {
  id: Int!
  leagueId: Int
  startYear: Int
  endYear: Int
}

#Match Types/Inputs
type Match {
  id: Int!
  season: Season!
  homeTeam: Team!
  awayTeam: Team!
  matchDay: Int!
  #matchDate: <some date type i need to figure out>
  #matchEvents: [MatchEvent!]
  #matchStats: MatchStats
}

input NewMatch {
  seasonId: Int!
  homeTeamId: Int!
  awayTeamId: Int!
  matchDay: Int!
  #matchDate: <some date type i need to figure out>
  #matchEvents: [MatchEvent!]
  #matchStats: MatchStats
}

input UpdatedMatch {
  id: Int!
  seasonId: Int
  homeTeamId: Int
  awayTeamId: Int
  matchDay: Int
}

#Match Event Types/Inputs
type MatchEvent {
  id: Int!
  match: Match!
  team: Team!
  player: Player!
  eventType: Int!
  eventMinute: Int!
  stoppageTime: Int
}

input NewMatchEvent {
  matchId: Int!
  teamId: Int!
  playerId: Int!
  eventType: Int! 
  eventMinute: Int!
  stoppageTime: Int
}

input UpdatedMatchEvent {
  id: Int!
  matchId: Int
  teamId: Int
  playerId: Int
  eventType: Int!
  eventMinute: Int
  stoppageTime: Int
}

#Match Stats Types/Inputs
type MatchStats {
  id: Int!
  Match: Match!
  possessionHome: Int!
  totalShotsHome: Int!
  shotsOnTargetHome: Int!
  savesHome: Int!
  cornersHome: Int!
  foulsHome: Int!
  offsidesHome: Int!
  possessionAway: Int!
  totalShotsAway: Int!
  shotsOnTargetAway: Int!
  savesAway: Int!
  cornersAway: Int!
  foulsAway: Int!
  offsidesAway: Int!
}

input NewMatchStats {
  MatchId: Int!
  possessionHome: Int!
  totalShotsHome: Int!
  shotsOnTargetHome: Int!
  savesHome: Int!
  cornersHome: Int!
  foulsHome: Int!
  offsidesHome: Int!
  possessionAway: Int!
  totalShotsAway: Int!
  shotsOnTargetAway: Int!
  savesAway: Int!
  cornersAway: Int!
  foulsAway: Int!
  offsidesAway: Int!
}

input UpdatedMatchStats {
  id: Int!
  MatchId: Int
  possessionHome: Int
  totalShotsHome: Int
  shotsOnTargetHome: Int
  savesHome: Int
  cornersHome: Int
  foulsHome: Int
  offsidesHome: Int
  possessionAway: Int
  totalShotsAway: Int
  shotsOnTargetAway: Int
  savesAway: Int
  cornersAway: Int
  foulsAway: Int
  offsidesAway: Int
}

#Response for deletion
type DeleteResponse {
  message: String!
}

type Query {
  #Leagues
  leagues: [League!]!
  leagueById(leagueId: Int!): League!

  #Teams
  teams: [Team!]!
  teamById(teamId: Int!): Team!
  
  #Players
  players: [Player!]!
  playerById(playerId: Int!): Player!

  #Seasons
  seasonsByLeagueId(leagueId: Int!): [Season!]!
  seasonById(seasonId: Int!): Season!

  #Matches
  matchById(matchId: Int!): Match!
  matchesBySeasonId(seasonId: Int!): [Match!]!

  #Match Events
  matchEventsByMatchId(matchId: Int!): [MatchEvent!]
  
  #Match Stats
  matchStatsByMatchId(matchId: Int!): MatchStats!
}

type Mutation {
  #Leagues
  createLeague(input: NewLeague!): League!
  updateLeague(input: UpdatedLeague!): League!
  deleteLeague(id: Int!): DeleteResponse!

  #Teams
  createTeam(input: NewTeam!): Team!
  updateTeam(input: UpdatedTeam!): Team!
  deleteTeam(id: Int!): DeleteResponse!

  #Players
  createPlayer(input: NewPlayer!): Player!
  updatePlayer(input: UpdatedPlayer!): Player!
  deletePlayer(id: Int!): DeleteResponse!

  #Seasons
  createSeason(input: NewSeason!): Season!
  updateSeason(input: UpdatedSeason!): Season!
  deleteSeason(id: Int!): DeleteResponse!

  #Matches
  createMatch(input: NewMatch!): Match!
  updateMatch(input: UpdatedMatch!): Match!
  deleteMatch(id: Int!): DeleteResponse!

  #Match Events
  createMatchEvent(input: NewMatchEvent!): MatchEvent!
  updateMatchEvent(input: UpdatedMatchEvent!): MatchEvent!
  deleteMatchEvent(id: Int!): DeleteResponse!

  #Match Stats
  createMatchStats(input: NewMatchStats!): MatchStats!
  updateMatchStats(input: UpdatedMatchStats!): MatchStats!
  deleteMatchStats(id: Int!): DeleteResponse
}